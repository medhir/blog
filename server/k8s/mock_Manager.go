// Code generated by mockery v1.1.1. DO NOT EDIT.

package k8s

import (
	mock "github.com/stretchr/testify/mock"
	corev1 "k8s.io/api/core/v1"

	v1 "k8s.io/api/apps/v1"

	v1beta1 "k8s.io/api/extensions/v1beta1"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// AddDeployment provides a mock function with given fields: deployment
func (_m *MockManager) AddDeployment(deployment *v1.Deployment) error {
	ret := _m.Called(deployment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Deployment) error); ok {
		r0 = rf(deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddIngressRule provides a mock function with given fields: ingressName, rule
func (_m *MockManager) AddIngressRule(ingressName string, rule v1beta1.IngressRule) error {
	ret := _m.Called(ingressName, rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, v1beta1.IngressRule) error); ok {
		r0 = rf(ingressName, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPersistentVolumeClaim provides a mock function with given fields: pvc
func (_m *MockManager) AddPersistentVolumeClaim(pvc *corev1.PersistentVolumeClaim) error {
	ret := _m.Called(pvc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.PersistentVolumeClaim) error); ok {
		r0 = rf(pvc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddService provides a mock function with given fields: svc
func (_m *MockManager) AddService(svc *corev1.Service) error {
	ret := _m.Called(svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.Service) error); ok {
		r0 = rf(svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDeployment provides a mock function with given fields: deployment
func (_m *MockManager) RemoveDeployment(deployment *v1.Deployment) error {
	ret := _m.Called(deployment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Deployment) error); ok {
		r0 = rf(deployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveIngressRule provides a mock function with given fields: ingressName, rule
func (_m *MockManager) RemoveIngressRule(ingressName string, rule v1beta1.IngressRule) error {
	ret := _m.Called(ingressName, rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, v1beta1.IngressRule) error); ok {
		r0 = rf(ingressName, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePersistentVolumeClaim provides a mock function with given fields: pvc
func (_m *MockManager) RemovePersistentVolumeClaim(pvc *corev1.PersistentVolumeClaim) error {
	ret := _m.Called(pvc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.PersistentVolumeClaim) error); ok {
		r0 = rf(pvc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveService provides a mock function with given fields: svc
func (_m *MockManager) RemoveService(svc *corev1.Service) error {
	ret := _m.Called(svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.Service) error); ok {
		r0 = rf(svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
