stages:
  - lint
  - test
  - build
  - deploy

.setup-client-job: &setup-client-job
  - cd client
  - npm install

.setup-go-job: &setup-go-job
  # - apk add --no-cache bash git openssh build-base
  # - git config --global --add url."git@github.com:".insteadOf "https://github.com/"
  - go get -d -v
  - go get -u golang.org/x/lint/golint

.setup-deploy-job: &setup-deploy-job
  - apk add --no-cache curl
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  - chmod +x ./kubectl
  - mv ./kubectl /usr/local/bin/kubectl

# See https://docs.gitlab.com/ee/ci/yaml/README.html#includetemplate for details
# Copied from https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Build.gitlab-ci.yml
.setup-docker-job: &setup-docker-job
  - |
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" ] && [ "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi

    if [[ -n "$CI_REGISTRY" && -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    fi

client lint:
  image: "node:8-alpine"
  stage: lint
  before_script:
    - *setup-client-job
  script:
    - npm run lint

client format:
  image: "node:8-alpine"
  stage: lint
  before_script:
    - *setup-client-job
  script:
    - npm run format-check

client test:
  image: "node:8-alpine"
  stage: test
  before_script:
    - *setup-client-job
  script:
    - npm run test-ci

go lint:
  image: "registry.medhir.com/medhir/blog-go-vips/master:latest"
  stage: lint
  before_script:
    - *setup-go-job
  script:
    - golint -set_exit_status ./...

go test:
  image: "registry.medhir.com/medhir/blog-go-vips/master:latest"
  stage: test
  before_script:
    - *setup-go-job
    - cd server
  script:
    - go test ./...

build server:
  stage: build
  image: docker:stable
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:stable-dind
  before_script:
    - *setup-docker-job
    - cd server
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi

      export IMAGE_TAGGED="$CI_APPLICATION_REPOSITORY/server:$CI_APPLICATION_TAG"
      export IMAGE_LATEST="$CI_APPLICATION_REPOSITORY/server:latest"

      docker pull $IMAGE_LATEST || true
      docker build --cache-from $IMAGE_LATEST --tag $IMAGE_TAGGED --tag $IMAGE_LATEST .
      docker push $IMAGE_TAGGED
      docker push $IMAGE_LATEST

deploy server review:
  stage: deploy
  before_script:
    - *setup-deploy-job
  script:
    - kubectl apply -f kubernetes/server/deployment/review.yml
    - kubectl apply -f kubernetes/server/service/review.yml
    - kubectl set image deployment/server-review server-review=registry.medhir.com/medhir/blog/$CI_COMMIT_BRANCH/server:$CI_COMMIT_SHA
  environment:
    name: review/$CI_COMMIT_SHA
    # url: https://$CI_ENVIRONMENT_SLUG.review.medhir.com
    url: https://api-review.medhir.com
    on_stop: stop server review
  only:
    - branches
  except:
    - master

stop server review:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script:
    - *setup-deploy-job
  script:
    - kubectl delete -f kubernetes/server/deployment/review.yml
    - kubectl delete -f kubernetes/server/service/review.yml
  when: manual
  environment:
    name: review/$CI_COMMIT_SHA
    action: stop

#deploy staging:
#  stage: deploy
#  before_script:
#    - *setup-deploy-job
#  script:
#    - kubectl apply -f kubernetes/blog/deployments/blog-staging.yml
#    - kubectl apply -f kubernetes/blog/services/blog-staging.yml
#  environment:
#    name: staging/$CI_COMMIT_SHA
#    url: https://stage.medhir.com
#    on_stop: stop staging
#  only:
#    - master
#
#stop staging:
#  stage: deploy
#  variables:
#    GIT_STRATEGY: none
#  before_script:
#    - *setup-deploy-job
#  script:
#    - kubectl delete -f kubernetes/blog/deployments/blog-staging.yml
#    - kubectl delete -f kubernetes/blog/services/blog-staging.yml
#  when: manual
#  environment:
#    name: staging/$CI_COMMIT_SHA
#    action: stop
#  only:
#    - master

#deploy production:
#  stage: deploy
#  before_script:
#    - *setup-deploy-job
#  script:
#    - kubectl set image deployment/blog-production blog-production=registry.medhir.com/medhir/blog/master:$CI_COMMIT_SHA
#  environment:
#    name: production
#    url: https://medhir.com
#  when: manual
#  only:
#    - master
